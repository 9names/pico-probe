; Goals:
;
; * Send/receive data at max speed (F/2)
; * Allow for sending or receiving, or use 2 PIO programs
;
; SWD Protocol steps:
; 1. Send request byte
; 2. Read ACK, return if error (send 32 clocks if error, as per standard)
; 3. Send/Receive 32 bit word + parity
; 4. Perform extra trailing clocks as per the standard
;
;
; - side x is the swd clock signal
; - uses auto push/pull with 8 bits limit
; - IRQ 0 is done (TODO: check this is fine)
; - IRQ 1 is error (TODO: check this is fine)
;
;
; Usage (sending):
;
; txfifo.write(request_bytes);
; txfifo.write(data);
; txfifo.write(parity);
; sm.start();
; // wait for done IRQ
;
; Usage (receiving):
;
; txfifo.write(request_bytes);
; sm.start();
; // wait for done IRQ
; let data = rxfifo.read();
; let parity = rxfifo.read();

.side_set 1 ; each instruction may set 1 bit

; TODO

; 1. send request
pull                        side 0
set x, 7                    side 0

set pindirs 1               side 0 ; output
req:
    out pins, 1             side 0
    jmp x-- req             side 1

; 2. receive ack
set pindirs 0               side 0

; turnaround
nop                         side 1
nop                         side 0

; read ACK (nop while testing with logic analyzer)
nop side 1 ; jmp pin ack_ok              side 1 ; if first bit is 1, ack maybe OK
           ; jmp ack_error               side 0 ; if 0, jump to error checking
           ; ack_ok:
nop side 0 ; nop                         side 0
nop side 1 ; jmp pin ack_error_protocol  side 1 ; if second bit is 1, protocol error
set x, 31                   side 0              ; prepare for read: 32bit data 
nop side 1 ; jmp pin ack_error_protocol  side 1 ; if third bit is 1, protocol error

; if there is no data in the output register, it's a read operation
pull noblock                side 0
jmp !osre write_data        side 0 

read_data:   ; we are in read from before, no need to set pindirs again
    read_loop:
        in pins, 1          side 1
        jmp x-- read_loop   side 0

    push                    side 0

    ; read parity
    in pins, 1              side 1
    push                    side 0

    set x, 7                side 1
    jmp trail_loop          side 0

write_data:
    ; turnaround (write)
    set pindirs 1           side 1 ; output mode and turnaround clock

    write_loop:
        out pins, 1         side 0
        jmp !osre write_loop  side 1

    pull  side 0
    out pins, 1         side 0 ; clock out parity
    set x, 7            side 1
    jmp trail_loop                    side 0

ack_error:

; TODO, figure out if WAIT or FAULT

ack_error_protocol:

irq 1                       side 0 ; error
set x, 31                   side 0

; trailing clocks
trail_loop:
    set pindirs 0           side 0 ; input
    jmp x-- trail_loop      side 1

done:
    irq wait 0              side 0